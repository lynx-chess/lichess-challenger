name: Release

on:

  workflow_dispatch:
    inputs:
      new_version:
        description: 'New version. If empty, run number will be used and no commit/tag/release will be created'
        default: ''
        required: false
      should_publish_docker_image:
        description: 'Create lichess-challenger docker image'
        default: 'true'
        required: true
      should_commit_new_version:
        description: 'Commit and push version increment. If true, this new commit will be the one tagged (in case should_tag_new_version is also set to true)'
        default: 'true'
        required: true
      should_tag_new_version:
        description: 'Tag version release. If false, no release will be created either'
        default: 'true'
        required: true
      should_create_github_release:
        description: 'Create GitHub Release'
        default: 'true'
        required: true

env:
  ARTIFACT_NAME: lichess-challenger

jobs:
  publish-artifacts:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        runtime-identifier: [win-x64, win-arm64, linux-x64, linux-arm64, linux-arm, osx-x64, osx.11.0-arm64]
      fail-fast: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
    - uses: actions/checkout@v2

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.100'
        include-prerelease: true

    - name: Set version to ${{ github.event.inputs.new_version }}
      shell: pwsh
      run: |
        $input_path = "src/LichessChallenger/LichessChallenger.csproj"
        $regex = "(?<=<Version>).*(?=</Version>)"
        (Get-Content $input_path) -Replace $regex, '${{ github.event.inputs.new_version }}' | Out-File $input_path

    - name: Publish ${{ matrix.runtime-identifier }} version
      run: dotnet publish src/LichessChallenger/LichessChallenger.csproj -c Release --runtime ${{ matrix.runtime-identifier }} --self-contained -o artifacts/${{ matrix.runtime-identifier }}

    - name: Upload ${{ env.ARTIFACT_NAME }}-${{ matrix.runtime-identifier }} artifact
      if: github.event.inputs.new_version != ''
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ github.event.inputs.new_version }}-${{ matrix.runtime-identifier }}
        path: |
          artifacts/${{ matrix.runtime-identifier }}/
          !artifacts/**/*.pdb
        if-no-files-found: error

    - name: Upload ${{ env.ARTIFACT_NAME }}-${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}-${{ matrix.runtime-identifier }} artifact
      if: github.event.inputs.new_version == ''
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}-${{ matrix.runtime-identifier }}
        path: |
          artifacts/${{ matrix.runtime-identifier }}/
          !artifacts/**/*.pdb
        if-no-files-found: error

  publish-docker-images:
    name: Publish Docker images
    needs: publish-artifacts
    if: github.event.inputs.new_version != '' && github.event.inputs.should_publish_docker_image == 'true'

    env:
        REGISTRY: ghcr.io
        ARM_RID: linux-arm64
        AMD_RID: linux-x64

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        path: artifacts/${{ env.ARTIFACT_NAME }}-linux-arm64
        name: ${{ env.ARTIFACT_NAME }}-${{ github.event.inputs.new_version }}-${{ env.ARM_RID }}

    - uses: actions/download-artifact@v2
      with:
        path: artifacts/${{ env.ARTIFACT_NAME }}-linux-x64
        name: ${{ env.ARTIFACT_NAME }}-${{ github.event.inputs.new_version }}-${{ env.AMD_RID }}

    - name: Docker login
      run: echo "${{ secrets.DOCKER_REGISTRY_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        target: ${{ env.ARTIFACT_NAME }}
        build-args: |
          ARM_ARTIFACT_PATH=artifacts/${{ env.ARTIFACT_NAME }}-${{ env.ARM_RID }}/
          AMD_ARTIFACT_PATH=artifacts/${{ env.ARTIFACT_NAME }}-${{ env.AMD_RID }}/
        platforms: |
          linux/amd64
          linux/arm64
        tags: |
          ${{ env.REGISTRY }}/lynx-chess/${{ env.ARTIFACT_NAME }}:${{ github.event.inputs.new_version }}
          ${{ env.REGISTRY }}/lynx-chess/${{ env.ARTIFACT_NAME }}:latest
        push: true

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  release:
    needs: [publish-artifacts, publish-docker-images]
    if: success() && github.event.inputs.new_version != ''

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure git user
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Set version to ${{ github.event.inputs.new_version }}
      shell: pwsh
      run: |
        $input_path = "src/LichessChallenger/LichessChallenger.csproj"
        $regex = "(?<=<Version>).*(?=</Version>)"
        (Get-Content $input_path) -Replace $regex, '${{ github.event.inputs.new_version }}' | Out-File $input_path

    - name: Commit and push version increment
      if: github.event.inputs.should_commit_new_version == 'true'
      continue-on-error: true
      run: |
        git switch ${{ env.GITHUB_REF_SLUG }}
        git status
        git commit -am "Release v${{ github.event.inputs.new_version }}"
        git push

    - name: Create git tag
      if: github.event.inputs.should_tag_new_version == 'true'
      run: |
        git switch ${{ env.GITHUB_REF_SLUG }}
        git status
        git tag -a v${{ github.event.inputs.new_version }} -m "v${{ github.event.inputs.new_version }}"
        git push --tags

    - uses: actions/download-artifact@v2
      if: github.event.inputs.should_create_github_release == 'true' && github.event.inputs.should_tag_new_version == 'true'
      with:
        path: artifacts/

    - name: Compress artifacts again
      if: github.event.inputs.should_create_github_release == 'true' && github.event.inputs.should_tag_new_version == 'true'
      run: for i in artifacts/*; do zip -0 -r -q -j "${i%/}.zip" "$i" & done; wait

    - name: Create GitHub release and upload assets
      if: github.event.inputs.should_create_github_release == 'true' && github.event.inputs.should_tag_new_version == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -x
        assets=()
        for asset in artifacts/*.zip; do
          assets+=("-a" "$asset")
        done
        tag_name="v${{ github.event.inputs.new_version }}"
        hub release create "${assets[@]}" --draft --message "$tag_name" "$tag_name"
